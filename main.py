
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import os
import warnings
import tkinter
import skimage
import threading
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from pathlib import Path
import xgboost as xgb
from sklearn.naive_bayes import GaussianNB
from skimage.io import imread
from skimage.transform import resize
from pathlib import Path
import Accuracies
import Result
import PLOT
from sklearn import metrics
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from PIL import Image
import matplotlib.pyplot as plt
import numpy
from sklearn import metrics

def main_page():
    # This file was generated by the Tkinter Designer by Parth Jadhav
    # https://github.com/ParthJadhav/Tkinter-Designer
    global progress

    from pathlib import Path

    # from tkinter import *
    # Explicit imports to satisfy Flake8
    from tkinter import Toplevel,Tk, Canvas, Entry, Text, Button, PhotoImage

    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path(r"E:\Tkinter designer\New Main\build\assets\frame0")

    def relative_to_assets(path: str) -> Path:
        return ASSETS_PATH / Path(path)

    window = Tk()

    window.geometry("1024x768")
    window.configure(bg="#FFFFFF")

    def fix_cm(list):
        i = 0
        while (i < len(list)):
            if (list[i] == 0):
                list[i] = 1
            else:
                list[i] = 0
            i = i + 1
        i = 0
        return list
    def path():


        from tkinter import filedialog
        data = []
        input_dir = filedialog.askdirectory()
        print("Entered function")
        categories = ['ok', 'def']

        # This file was generated by the Tkinter Designer by Parth Jadhav
        # https://github.com/ParthJadhav/Tkinter-Designer
        data = []
        labels = []
        print("Accessing Images")
        i = 1
        for category_idx, category in enumerate(categories):
            for file in os.listdir(os.path.join(input_dir, category)):
                img_path = os.path.join(input_dir, category, file)
                img = imread(img_path)
                img = resize(img, (15, 15))
                data.append(img.flatten())
                labels.append(category_idx)
                print(i)
                i = i + 1

        import numpy as np

        data = np.asarray(data)
        labels = np.asarray(labels)
        print("Splitting")
        # train / test split
        x_train, x_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, shuffle=True, stratify=labels)

        print("Training")
        # train classifier
        svc = SVC()
        parameters = [{'gamma': [0.01, 0.001, 0.0001], 'C': [1, 10, 100, 1000]}]

        grid_search = GridSearchCV(svc, parameters)

        grid_search.fit(x_train, y_train)
        print("Performance")
        # test performance
        global best_estimator
        best_estimator = grid_search.best_estimator_

        pred_svc = best_estimator.predict(x_test)

        score_svc = accuracy_score(y_test, pred_svc)
        precision_svc = precision_score(y_test, pred_svc)
        # recall: tp / (tp + fn)
        recall_svc = recall_score(y_test, pred_svc)
        # f1: 2 tp / (2 tp + fp + fn)
        f1_svc = f1_score(y_test, pred_svc)
        print('{}% of samples were correctly classified using SVC'.format(str(score_svc * 100)))
        global xgbc
        xgbc = xgb.XGBClassifier()
        xgbc.fit(x_train, y_train)

        pred_xgb = xgbc.predict(x_test)

        score_xgb = accuracy_score(y_test, pred_xgb)
        precision_xgb = precision_score(y_test, pred_xgb)
        recall_xgb = recall_score(y_test, pred_xgb)
        f1_xgb = f1_score(y_test, pred_xgb)
        print('{}% of samples were correctly classified using XGBoost'.format(str(score_xgb * 100)))
        global gnbc
        gnbc = GaussianNB()

        # fit the model

        gnbc.fit(x_train, y_train)
        pred_gnb = gnbc.predict(x_test)

        score_gnb = accuracy_score(y_test, pred_gnb)
        precision_gnb = precision_score(y_test, pred_gnb)
        recall_gnb = recall_score(y_test, pred_gnb)
        f1_gnb = f1_score(y_test, pred_gnb)

        print('{}% of samples were correctly classified using GNB'.format(str(score_gnb * 100)))

        score_svc = round(score_svc * 100,2)
        score_xgb = round(score_xgb * 100,2)
        score_gnb = round(score_gnb * 100,2)

        precision_svc = round(precision_svc * 100, 2)
        precision_xgb = round(precision_xgb * 100, 2)
        precision_gnb = round(precision_gnb * 100, 2)

        recall_svc = round(recall_svc * 100, 2)
        recall_xgb = round(recall_xgb * 100, 2)
        recall_gnb = round(recall_gnb * 100, 2)

        f1_svc = round(f1_svc * 100, 2)
        f1_xgb = round(f1_xgb * 100, 2)
        f1_gnb = round(f1_gnb * 100, 2)

        cm_test = fix_cm(y_test)
        cm_svc = fix_cm(pred_svc)
        cm_xgb = fix_cm(pred_xgb)
        cm_gnb = fix_cm(pred_gnb)
        confusion_matrix = metrics.confusion_matrix(cm_xgb, cm_test)
        cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix, display_labels=['DEF', 'OK'])
        cm_display.plot()
        plt.title("SVC")

        plt.savefig("C:/Users/moham/Desktop/PRODA NEW/CMSVC.png")
        plt.close()
        image = Image.open("C:/Users/moham/Desktop/PRODA NEW/CMSVC.png")
        image = image.resize((480, 261))
        image.save("C:/Users/moham/Desktop/PRODA NEW/CMSVC.png")

        confusion_matrix = metrics.confusion_matrix(cm_xgb, cm_test)

        cmp = metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix, display_labels=['DEF', 'OK'])
        cmp.plot()
        plt.title("XGB")
        plt.savefig("C:/Users/moham/Desktop/PRODA NEW/CMXGB.png")
        plt.close()
        image = Image.open("C:/Users/moham/Desktop/PRODA NEW/CMXGB.png")
        image = image.resize((480, 261))
        image.save("C:/Users/moham/Desktop/PRODA NEW/CMXGB.png")



        confusion_matrix = metrics.confusion_matrix(cm_gnb, cm_test)
        cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix, display_labels=['DEF', 'OK'])
        cm_display.plot()
        plt.title("GNB")
        plt.savefig("C:/Users/moham/Desktop/PRODA NEW/CMGNB.png")
        plt.close()
        image = Image.open("C:/Users/moham/Desktop/PRODA NEW/CMGNB.png")
        image = image.resize((480, 261))
        image.save("C:/Users/moham/Desktop/PRODA NEW/CMGNB.png")
        big = 0.0
        global textb
        textb = ""
        if (score_svc > score_xgb):
            if (score_svc > score_gnb):
                big = score_svc
                textb = "SVC"


            else:
                big = score_gnb
                textb = "Naive Bayes"

        else:
            if (score_xgb > score_gnb):
                big = score_xgb
                textb = "XGBoost"

            else:
                big = score_gnb
                textb = "Naive Bayes"
        dict = grid_search.best_params_
        Gvalue = dict['gamma']
        Cvalue = dict['C']
        window.destroy()
        Accuracies.show(score_svc, score_xgb, score_gnb, textb, precision_svc, precision_xgb, precision_gnb, recall_svc, recall_xgb, recall_gnb, f1_svc, f1_xgb, f1_gnb, data, labels, Gvalue, Cvalue)
        main_page()

    def calc():
        from tkinter import filedialog
        import numpy as np
        data = []
        file = filedialog.askopenfile(mode='r')
        img_path = os.path.abspath(file.name)
        print(img_path)
        img = imread(img_path)
        img = resize(img, (15, 15))
        data.append(img.flatten())
        data = np.asarray(data)
        window.destroy()
        if (textb == "SVC"):
            pred = best_estimator.predict(data)

        elif (textb == "XGBoost"):
            pred = xgbc.predict(data)

        else:
            pred = gnbc.predict(data)
        print(pred)
        if (pred == [1]):
            print('defective')
            prediction = "Defective"


        else:
            print('ok')
            prediction = "Non-Defective"
        Result.showres(pred,img_path)
        main_page()

    canvas = Canvas(
        window,
        bg="#FFFFFF",
        height=768,
        width=1024,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )

    canvas.place(x=0, y=0)
    canvas.create_rectangle(
        54.0,
        677.0,
        216.0,
        736.0,
        fill="#D9D9D9",
        outline="")

    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        512.0,
        384.0,
        image=image_image_1
    )

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        516.0,
        384.0,
        image=image_image_2
    )

    canvas.create_rectangle(
        585.0,
        0.0,
        1024.0,
        769.0,
        fill="#75D6FD",
        outline="")

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=calc,
        relief="flat"
    )
    button_1.place(
        x=696.0,
        y=426.0,
        width=212.0,
        height=70.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=path,
        relief="flat"
    )
    button_2.place(
        x=696.0,
        y=227.0,
        width=210.0,
        height=70.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=window.destroy,
        relief="flat"
    )
    button_3.place(
        x=27.0,
        y=637.0,
        width=222.0,
        height=61.0
    )
    window.resizable(False, False)

    window.mainloop()

with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    main_page()

